"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var _1 = require(".");
var TelegramChat = /** @class */ (function () {
    function TelegramChat(input, options) {
        if (options === void 0) { options = {}; }
        this._messages = [];
        this._id = 0;
        this._users = [];
        this._options = {};
        var content = JSON.parse(input);
        // istanbul ignore next
        if (content === undefined) {
            throw new Error('JSON parse error');
        }
        this._name = content.name;
        this._id = content.id;
        this._type = content.type;
        this._options = __assign(__assign({}, TelegramChat.Defaults), options);
        this.parseContent(content);
    }
    Object.defineProperty(TelegramChat, "UserFields", {
        get: function () {
            return ['from', 'forwarded_from', 'actor', 'saved_from'];
        },
        enumerable: false,
        configurable: true
    });
    TelegramChat.prototype.parseUsers = function (message) {
        var _this = this;
        TelegramChat.UserFields.forEach(function (field) {
            var hasId = message[field + "_id"];
            var hasName = message[field];
            var hasParticipated = ['actor', 'from'].includes(field);
            if (hasId || hasName)
                _this.addOrFindUser(hasId, hasName, hasParticipated);
        });
    };
    TelegramChat.prototype.addUser = function (id, name, participated) {
        // istanbul ignore next
        if (!id && !name)
            throw Error("can't create user without id or name");
        var u = new _1.TelegramUser(id, name, participated);
        this._users.push(u);
        return u;
    };
    TelegramChat.prototype.findUserById = function (id) {
        return this._users.find(function (user) { return user.id === id && id !== undefined; });
    };
    TelegramChat.prototype.findUserByName = function (name) {
        return this._users.find(function (user) { return user.name === name && name !== undefined; });
    };
    TelegramChat.prototype.addOrFindUser = function (hasId, hasName, hasParticipated) {
        var u;
        if (hasId) {
            u = this.findUserById(hasId);
            // TODO: handle name mismatch
            if (u) {
                if (hasParticipated)
                    u.participated = true;
                return u;
            }
        }
        // istanbul ignore next
        if (!hasName)
            throw Error("Can't find user without id or name"); // should be impossible, but to be safe
        u = this.findUserByName(hasName);
        if (u) {
            if (hasId) {
                if (this._options.mergeMissingUserIdIntoName && hasId) {
                    u.id = hasId;
                    // istanbul ignore next
                    if (hasParticipated)
                        u.participated = true; // should be impossible, but to be safe
                    return u;
                }
                return this.addUser(hasId, hasName, hasParticipated);
            }
            if (hasParticipated)
                u.participated = true;
            return u;
        }
        return this.addUser(hasId, hasName, hasParticipated);
    };
    TelegramChat.prototype.parseContent = function (content) {
        var _this = this;
        content.messages.forEach(function (message) {
            _this.parseUsers(message);
            _this._messages.push(new _1.TelegramMessage(message, _this));
        });
    };
    TelegramChat.prototype.messageByID = function (id) {
        return this._messages.find(function (m) { return id === m.id; });
    };
    Object.defineProperty(TelegramChat.prototype, "isBot", {
        get: function () {
            return this.type === _1.ChatType.BotChat;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TelegramChat.prototype, "isPublic", {
        get: function () {
            return this.type === _1.ChatType.PublicSupergroup || this.type === _1.ChatType.PublicChannel;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TelegramChat.prototype, "isPrivate", {
        get: function () {
            return !this.isPublic;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TelegramChat.prototype, "isPrivateGroup", {
        get: function () {
            return this.type === _1.ChatType.PrivateGroup;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TelegramChat.prototype, "isPublicSupergroup", {
        get: function () {
            return this.type === _1.ChatType.PublicSupergroup;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TelegramChat.prototype, "isGroup", {
        get: function () {
            return this.type === _1.ChatType.PrivateGroup || this.type === _1.ChatType.PublicSupergroup;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TelegramChat.prototype, "isSaved", {
        get: function () {
            return this.type === _1.ChatType.SavedMessages;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TelegramChat.prototype, "isPersonal", {
        get: function () {
            return this.type === _1.ChatType.PersonalChat;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TelegramChat.prototype, "isChannel", {
        get: function () {
            return this.type === _1.ChatType.PrivateChannel || this.type === _1.ChatType.PublicChannel;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TelegramChat.prototype, "isPrivateChannel", {
        get: function () {
            return this.type === _1.ChatType.PrivateChannel;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TelegramChat.prototype, "isPublicChannel", {
        get: function () {
            return this.type === _1.ChatType.PublicChannel;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TelegramChat.prototype, "id", {
        get: function () {
            return this._id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TelegramChat.prototype, "name", {
        get: function () {
            return this._name;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TelegramChat.prototype, "type", {
        get: function () {
            return this._type;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TelegramChat.prototype, "messages", {
        get: function () {
            return this._messages;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TelegramChat.prototype, "users", {
        get: function () {
            return this._users;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TelegramChat.prototype, "participants", {
        get: function () {
            return this._users.filter(function (u) { return u.participated; });
        },
        enumerable: false,
        configurable: true
    });
    TelegramChat.Defaults = {
        includeStickersAsEmoji: false,
        ignoreService: false,
        mergeMissingUserIdIntoName: true,
    };
    return TelegramChat;
}());
exports.default = TelegramChat;
//# sourceMappingURL=TelegramChat.js.map